# This is a basic workflow to help you get started with Actions

name: MVC Movie Terraform

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches:
        - '*-deploy'    
    

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

permissions:
      id-token: write
      contents: read

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  resourcegroups:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    environment: dev

    services: 
      selenium:
        image: selenium/standalone-chrome
        options: --shm-size=2gb
    
    name: 'Terraform MVC Movie Infrastructure'
    env:
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      AZURE_WEBAPP_ROOT: colins-mvc-movie-app-    # set this to your application's name
      AZURE_WEBAPP_PACKAGE_PATH: '.'      # set this to the path to your web app project, defaults to the repository root
      DOTNET_VERSION: '6.0.x'             # set this to the dot net version to use
      TF_VAR_personal_access_token: ${{secrets.PERSONAL_ACCESS_TOKEN}}
      TF_VAR_sql_admin_password: ${{ secrets.SQL_ADMIN_PASSWORD }}
      TF_VAR_client_id: ${{ secrets.AZURE_CLIENT_ID }}
      TF_VAR_client_secret: ${{ secrets.AZURE_CLIENT_SECRET }}
      TF_VAR_tenant_id: ${{ secrets.AZURE_TENANT_ID }}
      
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
  
      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false

      - name: 'Az CLI login'
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Extract branch names
        shell: bash
        run: |
          BRANCH=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}
          echo "branch=${BRANCH}" >> $GITHUB_OUTPUT
          echo $BRANCH
        id: extract_branch

      - name: Transform Branch Name
        shell: bash
        run: |
          BRANCH_TRANSFORM=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}
          BRANCH_TRANSFORM_UPPER=${BRANCH_TRANSFORM@U}
          echo "branch_transform=${BRANCH_TRANSFORM_UPPER//-/_}" >> $GITHUB_OUTPUT
        id: extract_branch_transform
      # Runs a single command using the runners shell
     
      - name: 'Terraform init'
        id: init
        run: |
          cd MvcMovie/Terraform
          terraform init -var="branch_name=${{ steps.extract_branch.outputs.branch }}" -backend-config="key=colin.terraform.${{ steps.extract_branch.outputs.branch }}.tfstate"

      
      #- name: 'Terraform force unlock'
      #  id: unlock
      #  run: |
      #    cd MvcMovie/Terraform
      #    terraform force-unlock -force 82b6aa92-75e4-f860-7b3d-0d3188f1568d

      # - name: 'Terraform destroy'
      #   id: destroy
      #   run: |
      #     cd MvcMovie/Terraform
      #      terraform destroy -auto-approve -var="branch_name=${{ steps.extract_branch.outputs.branch }}"

      # having to do this bit as I don't have permission to create resource groups on Azure, so reusing an existing one.
      # - name: 'Terraform import'
      #   id: import
      #   run: |
      #     cd MvcMovie/Terraform
      #     terraform import -var="branch_name=${{ steps.extract_branch.outputs.branch }}" azurerm_resource_group.MvcMovieResourceGroup /subscriptions/66516f71-f3d4-4911-b900-c6e4690a5b15/resourceGroups/rg-loganalytics-001

          
      #- name: 'Terraform plan'
      #  id: plan
      #  run: |
      #    cd MvcMovie/Terraform
      #    terraform plan
                    
      - name: 'Terraform apply'
        id: apply
        run: |
          cd MvcMovie/Terraform
          terraform apply -auto-approve -var="branch_name=${{ steps.extract_branch.outputs.branch }}"

      # Setup .NET Core SDK
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }} 
      
      # Run dotnet build and publish
      - name: dotnet build and publish
        run: |
          dotnet restore
          dotnet build --configuration Release
          dotnet publish -c Release -o '${{ env.AZURE_WEBAPP_PACKAGE_PATH }}/myapp' 

      # - name: App Settings Variable Substitution
      #   uses: microsoft/variable-substitution@v1
      #   with: 
      #     files: '${{ env.AZURE_WEBAPP_PACKAGE_PATH }}/myapp/appsettings.json'
      #   env:
      #     MOVIE_CONNECTION_KEY: MOVIE_DB_CONNECTION_${{ steps.extract_branch_transform.outputs.branch_transform }}
      #     ConnectionStrings.MvcMovieContext: ${{ secrets[env.MOVIE_CONNECTION_KEY] }}

      # Deploy to Azure Web apps
      - name: 'Run Azure webapp deploy action using publish profile credentials'
        uses: azure/webapps-deploy@v2
        with: 
          app-name: '${{ env.AZURE_WEBAPP_ROOT }}${{ steps.extract_branch.outputs.branch }}' # need to do replace of - with _ here extract_branch_transform
          package: '${{ env.AZURE_WEBAPP_PACKAGE_PATH }}/myapp'

      # Run the DB migrations
      - name: Run EF 
        env: 
          MOVIE_CONNECTION_KEY: MOVIE_DB_CONNECTION_${{ steps.extract_branch_transform.outputs.branch_transform }}
        run: | 
          dotnet tool install --global dotnet-ef --version 7.0.0
          dotnet tool restore
          # dotnet ef database update -p MvcMovie --connection ${{ secrets[env.MOVIE_CONNECTION_KEY] }}
          dotnet ef database update -p MvcMovie --connection "Server=tcp:colins-mvc-movie-mssql-server-colin-test-deploy.database.windows.net,1433;Initial Catalog=colins-mvc-movie-mssql-database-colin-test-deploy;Persist Security Info=True;User ID=exampleadmin;Password=Ex@mpleP@ssword123;MultipleActiveResultSets=true;Encrypt=True;TrustServerCertificate=true;Connection Timeout=30;"

      # Azure logout 
      - name: logout
        run: |
          az logout

      - name: Set environment variables
        env:
          MOVIE_URL_KEY: MOVIE_URL_${{ steps.extract_branch.outputs.branch }}
        run: |
          echo "MOVIE_URL=${{ vars.MOVIE_URL_KEY }}" >> $GITHUB_ENV

      - name: Print environment variables
        run: echo $MOVIE_URL

      - name: UI Tests
        run: |
          cd MvcMovie.UiTests
          dotnet test

